kubectl version
kubectl cluster-info
kubectl cluster-info dump

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
kubectl apply -f dashboard-adminuser.yaml
kubectl apply -f admin-role-binding.yml
kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | sls admin-user | ForEach-Object { $_ -Split '\s+' } | Select -First 1)
kubectl proxy
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
Creating the secrets
echo -n 'dbadmin' > ./username.txt
echo -n 'db3344@@pwd' > ./password.txt
kubectl create secret generic my-db-secret-from-files --from-file=./username.txt --from-file=./password.txt
kubectl get secrets

kubectl describe secrets/my-db-secret-from-files

kubectl apply -f mysecpod.yaml

kubectl describe -f mysecpod.yaml 

method 2
kubectl create secret generic mysql-database --from-literal=MYSQL_DATABASE="thedatabase"
kubectl create secret generic mysql-username --from-literal=MYSQL_USERNAME="theusername"
kubectl create secret generic mysql-password --from-literal=MYSQL_PASSWORD="thepassword"








kubectl create secret generic mysql-root-pass --from-literal=password=password

kubectl create secret generic mysql-user-pass --from-literal=username=demo_user --from-literal=password=demo_pass

kubectl create secret generic mysql-db-url --from-literal=database=virtusausappointmentdb --from-literal=url='jdbc:mysql://mysql:3306/virtusausappointmentdb?useSSL=false

kubectl get secrets
kubectl describe secrets mysql-user-pass
kubectl get persistentvolumes


http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
kubectl apply -f mysql-pv.yaml
kubectl get pv
kubectl get pvc
kubectl apply -f mysql-deployment.yaml
kubectl get pods
kubectl get svc
kubectl get deploy
kubectl run -it --rm --image=mysql --restart=Never mysql-client -- mysql -h mysql -ppassword
kubectl exec -it mongo-app-7559754fbf-n7mx4 /bin/bash
kubectl apply -f deployment-v7.yml
kubectl expose deployment --port 7070 customerapp --type=LoadBalancer --name=customerservicev1
#external ip pending then
kubectl patch svc traderservicev1  -p '{"spec": {"type": "LoadBalancer", "externalIPs":["172.22.0.1"]}}'

kubectl port-forward svc/customerservicev1 8060:7070
kubectl scale --replicas=1 deployment customerapp

az network public-ip create --resource-group  mc_vebgroup_vebcluster_southindia  --name Pixel-AKS-PIP --allocation-method static


kubectl autoscale deployment customerapp --min=1 --max=4 --cpu-percent=20

kubectl create configmap configmap-example-1 --from-file=./config-map-data.txt
kubectl describe configmap/configmap-example-1
kubectl delete configmap/configmap-example-1
